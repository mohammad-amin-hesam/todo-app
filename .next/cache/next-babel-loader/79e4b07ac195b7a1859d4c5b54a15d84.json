{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/amin/Templates/todo-sample/components/TaskForm.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Input from \"./Input\";\nimport styled from \"styled-components\";\nimport { primary } from \"../helpers/colors\";\nvar validateObj = Yup.object().shape({\n  title: Yup.string().min(3, \"Title most be between 3 and 50\").max(50, \"Title most be between 3 and 50\").required(\"Title is required\"),\n  description: Yup.string().min(10, \"Title most be between 10 and 200\").max(200, \"Title most be between 10 and 200\").required(\"Description is required\")\n});\nvar initialValues = {\n  title: \"\",\n  description: \"\"\n};\n\nvar TaskForm = function TaskForm(props) {\n  var handleSubmit = props.handleSubmit,\n      renderOptions = props.renderOptions;\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: validateObj,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, function (formProps) {\n    var values = formProps.values,\n        errors = formProps.errors,\n        touched = formProps.touched,\n        handleChange = formProps.handleChange,\n        handleBlur = formProps.handleBlur;\n    var titleErr = errors.title && touched.title;\n    var descriptionErr = errors.description && touched.description;\n    return __jsx(TaskFormContainer, {\n      onSubmit: handleSubmit,\n      autoComplete: \"off\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, renderOptions && renderOptions(), __jsx(Input, {\n      label: \"Title\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.title,\n      err: errors.title,\n      hasErr: titleErr,\n      id: \"addTaskInputTitle\",\n      name: \"title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }), __jsx(Input, {\n      label: \"Description\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.description,\n      err: errors.description,\n      hasErr: descriptionErr,\n      id: \"addTaskInputDescription\",\n      name: \"description\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      className: \"taskFormButtonBox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, \"Submit\")));\n  });\n};\n\nvar TaskFormContainer = styled.form(function () {\n  return {\n    \".taskFormButtonBox\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      button: {\n        background: primary,\n        color: \"#fff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 4,\n        height: 40,\n        width: 130\n      }\n    }\n  };\n});\nexport default TaskForm;","map":{"version":3,"sources":["/home/amin/Templates/todo-sample/components/TaskForm.tsx"],"names":["React","Formik","Yup","Input","styled","primary","validateObj","object","shape","title","string","min","max","required","description","initialValues","TaskForm","props","handleSubmit","renderOptions","formProps","values","errors","touched","handleChange","handleBlur","titleErr","descriptionErr","TaskFormContainer","form","display","alignItems","justifyContent","button","background","color","borderRadius","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Input from \"./Input\";\n\nimport styled from \"styled-components\";\nimport { primary } from \"../helpers/colors\";\n\nconst validateObj = Yup.object().shape({\n  title: Yup.string()\n    .min(3, \"Title most be between 3 and 50\")\n    .max(50, \"Title most be between 3 and 50\")\n    .required(\"Title is required\"),\n  description: Yup.string()\n    .min(10, \"Title most be between 10 and 200\")\n    .max(200, \"Title most be between 10 and 200\")\n    .required(\"Description is required\"),\n});\n\nconst initialValues = {\n  title: \"\",\n  description: \"\",\n};\n\nconst TaskForm = (props) => {\n  const { handleSubmit, renderOptions } = props;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={validateObj}\n    >\n      {(formProps) => {\n        const { values, errors, touched, handleChange, handleBlur } = formProps;\n\n        const titleErr = errors.title && touched.title;\n        const descriptionErr = errors.description && touched.description;\n\n        return (\n          <TaskFormContainer onSubmit={handleSubmit} autoComplete=\"off\">\n            {renderOptions && renderOptions()}\n            <Input\n              label={\"Title\"}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.title}\n              err={errors.title}\n              hasErr={titleErr}\n              id={\"addTaskInputTitle\"}\n              name=\"title\"\n            />\n            <Input\n              label={\"Description\"}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.description}\n              err={errors.description}\n              hasErr={descriptionErr}\n              id={\"addTaskInputDescription\"}\n              name=\"description\"\n            />\n            <div className=\"taskFormButtonBox\">\n              <button>Submit</button>\n            </div>\n          </TaskFormContainer>\n        );\n      }}\n    </Formik>\n  );\n};\n\nconst TaskFormContainer = styled.form(() => {\n  return {\n    \".taskFormButtonBox\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      button: {\n        background: primary,\n        color: \"#fff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 4,\n        height: 40,\n        width: 130,\n      },\n    },\n  };\n});\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}