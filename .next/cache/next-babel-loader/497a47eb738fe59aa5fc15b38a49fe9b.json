{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Axios from \"axios\";\nexport default class api {\n  constructor(obj) {\n    _defineProperty(this, \"getState\", void 0);\n\n    _defineProperty(this, \"dispatch\", void 0);\n\n    _defineProperty(this, \"maxRedirects\", void 0);\n\n    _defineProperty(this, \"xhr\", void 0);\n\n    _defineProperty(this, \"time_out\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"params\", void 0);\n\n    _defineProperty(this, \"handleErr\", err => {\n      if (!err.response) {// notif(\"سرور متصل نمی‌باشد\", \"danger\", 3);\n      } else if (err.response > 499 && err.response < 600) {// notif(\"خطا در اتصال، مجدداً تلاش کنید\", \"danger\", 3);\n      }\n    });\n\n    _defineProperty(this, \"handleRes\", res => {});\n\n    const {\n      auth\n    } = obj.getState();\n    const headers = {\n      \"Content-Type\": obj.content_type || \"application/json; charset=UTF8\"\n    };\n    this.params = {};\n\n    if (auth.key) {\n      this.params.token = auth.key;\n    }\n\n    this.key = auth.key || \"\";\n    this.time_out = 10000;\n    this.getState = obj.getState;\n    this.dispatch = obj.dispatch;\n    this.maxRedirects = 2;\n    this.xhr = Axios.create({\n      baseURL: obj.baseUrl || \"\",\n      headers,\n      responseType: obj.response_type || \"json\"\n    });\n  }\n\n  Get(url, params) {\n    return new Promise((resolve, reject) => {\n      const data = {\n        method: \"get\",\n        params: _objectSpread({}, this.params)\n      };\n      if (params) data.params = _objectSpread({}, this.params, {}, params);\n      this.xhr.request(url, data).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Put(url, params) {\n    return new Promise((resolve, reject) => {\n      let itemParams = _objectSpread({}, this.params);\n\n      if (params) itemParams = _objectSpread({}, this.params, {}, params);\n      this.xhr.put(url, itemParams).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Post(url, params) {\n    return new Promise((resolve, reject) => {\n      let itemParams = _objectSpread({}, this.params);\n\n      if (params) itemParams = _objectSpread({}, this.params, {}, params);\n      this.xhr.post(url, itemParams).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Upload(url, data, uploadCallback) {\n    return new Promise(async (resolve, reject) => {\n      this.xhr.post(url, data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"multipart/form-data;\"\n        },\n        onUploadProgress: uploadCallback ? e => {\n          let progress = Math.floor(e.loaded * 100 / e.total);\n          uploadCallback(progress);\n        } : null\n      }).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Delete(url, data) {\n    return new Promise((resolve, reject) => {\n      let itemdata = _objectSpread({}, this.params);\n\n      if (data) itemdata = _objectSpread({}, this.params, {}, data);\n      this.xhr.delete(url, {\n        data: itemdata\n      }).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}