{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_DATA, FETCH_TASK, FETCH_TODO_LIST, FETCH_COMPLETED_LIST } from \"../redux/types\";\nimport { uniq_id } from \"../helpers/props\";\n\nvar api = function api(obj) {\n  var _this = this;\n\n  _classCallCheck(this, api);\n\n  _defineProperty(this, \"getState\", void 0);\n\n  _defineProperty(this, \"dispatch\", void 0);\n\n  _defineProperty(this, \"db\", void 0);\n\n  _defineProperty(this, \"Setter\", function (data) {\n    localStorage.setItem(\"todo-list\", JSON.stringify(data));\n\n    _this.GetAll(_this.getState().todoList.type, data);\n  });\n\n  _defineProperty(this, \"GetAll\", function () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"All\";\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.db;\n\n    switch (type) {\n      case \"All\":\n        _this.dispatch({\n          type: SET_DATA,\n          data: data,\n          tabType: type\n        });\n\n        break;\n\n      case \"Todo\":\n        _this.dispatch({\n          type: FETCH_TODO_LIST,\n          data: data,\n          tabType: type\n        });\n\n        break;\n\n      case \"Completed\":\n        _this.dispatch({\n          type: FETCH_COMPLETED_LIST,\n          data: data,\n          tabType: type\n        });\n\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  _defineProperty(this, \"Get\", function (id) {\n    _this.dispatch({\n      type: FETCH_TASK,\n      item: _this.db.filter(function (item) {\n        return item.id === id;\n      })[0]\n    });\n\n    _this.Put(id, {\n      read: true\n    });\n  });\n\n  _defineProperty(this, \"Put\", function (id, data) {\n    var mirrorDb = _toConsumableArray(_this.db);\n\n    var item = mirrorDb.filter(function (task) {\n      return task.id === id;\n    })[0];\n    if (!item) return;\n    var indexOfItem = mirrorDb.indexOf(item);\n    mirrorDb[indexOfItem] = _objectSpread({}, item, {}, data);\n\n    _this.Setter(mirrorDb);\n  });\n\n  _defineProperty(this, \"Post\", function (data) {\n    return _this.Setter([].concat(_toConsumableArray(_this.db), [_objectSpread({}, data, {\n      read: false,\n      id: uniq_id()\n    })]));\n  });\n\n  _defineProperty(this, \"Delete\", function (id) {\n    return _this.Setter(_this.db.filter(function (item) {\n      return item.id !== id;\n    }));\n  });\n\n  var _data = localStorage.getItem(\"todo-list\");\n\n  this.getState = obj.getState;\n  this.dispatch = obj.dispatch;\n  this.db = _data ? JSON.parse(_data) : [];\n};\n\nexport { api as default };","map":null,"metadata":{},"sourceType":"module"}