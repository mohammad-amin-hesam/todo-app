{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/amin/Templates/todo-sample/components/TaskForm.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Input from \"./Input\";\nimport styled from \"styled-components\";\nimport { primary } from \"../helpers/colors\";\nvar validateObj = Yup.object().shape({\n  title: Yup.string().min(3, \"Title most be between 3 and 50\").max(50, \"Title most be between 3 and 50\").required(\"Title is required\"),\n  description: Yup.string().min(10, \"Title most be between 10 and 200\").max(200, \"Title most be between 10 and 200\").required(\"Description is required\")\n});\nvar inputs = [{\n  label: \"Title\",\n  name: \"title\"\n}, {\n  label: \"Description\",\n  name: \"description\"\n}];\n\nvar TaskForm = function TaskForm(props) {\n  var onSubmit = props.onSubmit,\n      renderOptions = props.renderOptions,\n      title = props.title,\n      description = props.description;\n  var initialValues = {\n    title: title || \"\",\n    description: description || \"\"\n  };\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validateObj,\n    enableReinitialize: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, function (formProps) {\n    var values = formProps.values,\n        errors = formProps.errors,\n        touched = formProps.touched,\n        handleChange = formProps.handleChange,\n        handleBlur = formProps.handleBlur,\n        handleSubmit = formProps.handleSubmit;\n\n    var getErr = function getErr(name) {\n      return errors[name] && touched[name];\n    };\n\n    return __jsx(TaskFormContainer, {\n      onSubmit: handleSubmit,\n      autoComplete: \"off\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, renderOptions && renderOptions(), inputs.map(function (item, index) {\n      var key = \"TaskFormInputListItem\".concat(item.name).concat(index);\n      return __jsx(Fragment, {\n        key: key,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, __jsx(Input, {\n        label: item.label,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        value: values[item.name],\n        err: errors[item.name],\n        hasErr: getErr(item.name),\n        id: key,\n        name: item.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }\n      }));\n    }), __jsx(\"div\", {\n      className: \"taskFormButtonBox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, \"Submit\")));\n  });\n};\n\nvar TaskFormContainer = styled.form(function () {\n  return {\n    \".taskFormButtonBox\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      button: {\n        background: primary,\n        color: \"#fff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 4,\n        height: 40,\n        width: 130\n      }\n    }\n  };\n});\nexport default TaskForm;","map":{"version":3,"sources":["/home/amin/Templates/todo-sample/components/TaskForm.tsx"],"names":["React","Fragment","Formik","Yup","Input","styled","primary","validateObj","object","shape","title","string","min","max","required","description","inputs","label","name","TaskForm","props","onSubmit","renderOptions","initialValues","formProps","values","errors","touched","handleChange","handleBlur","handleSubmit","getErr","map","item","index","key","TaskFormContainer","form","display","alignItems","justifyContent","button","background","color","borderRadius","height","width"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Input from \"./Input\";\nimport styled from \"styled-components\";\nimport { primary } from \"../helpers/colors\";\n\nconst validateObj = Yup.object().shape({\n  title: Yup.string()\n    .min(3, \"Title most be between 3 and 50\")\n    .max(50, \"Title most be between 3 and 50\")\n    .required(\"Title is required\"),\n  description: Yup.string()\n    .min(10, \"Title most be between 10 and 200\")\n    .max(200, \"Title most be between 10 and 200\")\n    .required(\"Description is required\"),\n});\n\nconst inputs = [\n  {\n    label: \"Title\",\n    name: \"title\",\n  },\n  {\n    label: \"Description\",\n    name: \"description\",\n  },\n];\n\nconst TaskForm = (props) => {\n  const { onSubmit, renderOptions, title, description } = props;\n\n  const initialValues = {\n    title: title || \"\",\n    description: description || \"\",\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validateObj}\n      enableReinitialize={true}\n    >\n      {(formProps) => {\n        const {\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = formProps;\n\n        const getErr = (name) => errors[name] && touched[name];\n\n        return (\n          <TaskFormContainer onSubmit={handleSubmit} autoComplete=\"off\">\n            {renderOptions && renderOptions()}\n            {inputs.map((item, index) => {\n              const key = `TaskFormInputListItem${item.name}${index}`;\n              return (\n                <Fragment key={key}>\n                  <Input\n                    label={item.label}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values[item.name]}\n                    err={errors[item.name]}\n                    hasErr={getErr(item.name)}\n                    id={key}\n                    name={item.name}\n                  />\n                </Fragment>\n              );\n            })}\n            <div className=\"taskFormButtonBox\">\n              <button type=\"submit\">Submit</button>\n            </div>\n          </TaskFormContainer>\n        );\n      }}\n    </Formik>\n  );\n};\n\nconst TaskFormContainer = styled.form(() => {\n  return {\n    \".taskFormButtonBox\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      button: {\n        background: primary,\n        color: \"#fff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 4,\n        height: 40,\n        width: 130,\n      },\n    },\n  };\n});\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}