{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Axios from \"axios\";\nexport default class api {\n  constructor(obj) {\n    _defineProperty(this, \"getState\", void 0);\n\n    _defineProperty(this, \"dispatch\", void 0);\n\n    _defineProperty(this, \"maxRedirects\", void 0);\n\n    _defineProperty(this, \"xhr\", void 0);\n\n    _defineProperty(this, \"time_out\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"params\", void 0);\n\n    _defineProperty(this, \"handleErr\", err => {\n      if (!err.response) {// notif(\"سرور متصل نمی‌باشد\", \"danger\", 3);\n      } else if (err.response > 499 && err.response < 600) {// notif(\"خطا در اتصال، مجدداً تلاش کنید\", \"danger\", 3);\n      }\n    });\n\n    _defineProperty(this, \"handleRes\", res => {});\n\n    const {\n      auth\n    } = obj.getState();\n    const headers = {\n      \"Content-Type\": obj.content_type || \"application/json; charset=UTF8\"\n    };\n    this.params = {};\n\n    if (auth.key) {\n      this.params.token = auth.key;\n    }\n\n    this.key = auth.key || \"\";\n    this.time_out = 10000;\n    this.getState = obj.getState;\n    this.dispatch = obj.dispatch;\n    this.maxRedirects = 2;\n    this.xhr = Axios.create({\n      baseURL: obj.baseUrl || \"\",\n      headers,\n      responseType: obj.response_type || \"json\"\n    });\n  }\n\n  Get(url, params) {\n    return new Promise((resolve, reject) => {\n      const data = {\n        method: \"get\",\n        params: _objectSpread({}, this.params)\n      };\n      if (params) data.params = _objectSpread({}, this.params, {}, params);\n      this.xhr.request(url, data).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Put(url, params) {\n    return new Promise((resolve, reject) => {\n      let itemParams = _objectSpread({}, this.params);\n\n      if (params) itemParams = _objectSpread({}, this.params, {}, params);\n      this.xhr.put(url, itemParams).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Post(url, params) {\n    return new Promise((resolve, reject) => {\n      let itemParams = _objectSpread({}, this.params);\n\n      if (params) itemParams = _objectSpread({}, this.params, {}, params);\n      this.xhr.post(url, itemParams).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Upload(url, data, uploadCallback) {\n    return new Promise(async (resolve, reject) => {\n      this.xhr.post(url, data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"multipart/form-data;\"\n        },\n        onUploadProgress: uploadCallback ? e => {\n          let progress = Math.floor(e.loaded * 100 / e.total);\n          uploadCallback(progress);\n        } : null\n      }).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n  Delete(url, data) {\n    return new Promise((resolve, reject) => {\n      let itemdata = _objectSpread({}, this.params);\n\n      if (data) itemdata = _objectSpread({}, this.params, {}, data);\n      this.xhr.delete(url, {\n        data: itemdata\n      }).then(res => {\n        this.handleRes(res);\n        resolve(res);\n      }).catch(err => {\n        this.handleErr(err);\n        reject(err);\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/amin/Templates/todo-sample/api/index.tsx"],"names":["Axios","api","constructor","obj","err","response","res","auth","getState","headers","content_type","params","key","token","time_out","dispatch","maxRedirects","xhr","create","baseURL","baseUrl","responseType","response_type","Get","url","Promise","resolve","reject","data","method","request","then","handleRes","catch","handleErr","Put","itemParams","put","Post","post","Upload","uploadCallback","Accept","onUploadProgress","e","progress","Math","floor","loaded","total","Delete","itemdata","delete"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\n\nexport default class api {\n  getState: () => any;\n  dispatch: () => any;\n  maxRedirects: number;\n  xhr: any;\n  time_out: number;\n  key: string;\n  params: any;\n\n  constructor(obj) {\n    const { auth } = obj.getState();\n    const headers = {\n      \"Content-Type\": obj.content_type || \"application/json; charset=UTF8\",\n    };\n\n    this.params = {};\n\n    if (auth.key) {\n      this.params.token = auth.key;\n    }\n\n    this.key = auth.key || \"\";\n    this.time_out = 10000;\n    this.getState = obj.getState;\n    this.dispatch = obj.dispatch;\n    this.maxRedirects = 2;\n    this.xhr = Axios.create({\n      baseURL: obj.baseUrl || \"\",\n      headers,\n      responseType: obj.response_type || \"json\",\n    });\n  }\n\n  handleErr = (err) => {\n    if (!err.response) {\n      // notif(\"سرور متصل نمی‌باشد\", \"danger\", 3);\n    } else if (err.response > 499 && err.response < 600) {\n      // notif(\"خطا در اتصال، مجدداً تلاش کنید\", \"danger\", 3);\n    }\n  };\n\n  handleRes = (res) => {};\n\n  Get(url, params) {\n    return new Promise((resolve, reject) => {\n      const data: any = { method: \"get\", params: { ...this.params } };\n      if (params) data.params = { ...this.params, ...params };\n      this.xhr\n        .request(url, data)\n        .then((res) => {\n          this.handleRes(res);\n          resolve(res);\n        })\n        .catch((err) => {\n          this.handleErr(err);\n          reject(err);\n        });\n    });\n  }\n\n  Put(url, params) {\n    return new Promise((resolve, reject) => {\n      let itemParams = { ...this.params };\n      if (params) itemParams = { ...this.params, ...params };\n      this.xhr\n        .put(url, itemParams)\n        .then((res) => {\n          this.handleRes(res);\n          resolve(res);\n        })\n        .catch((err) => {\n          this.handleErr(err);\n          reject(err);\n        });\n    });\n  }\n\n  Post(url, params) {\n    return new Promise((resolve, reject) => {\n      let itemParams = { ...this.params };\n      if (params) itemParams = { ...this.params, ...params };\n      this.xhr\n        .post(url, itemParams)\n        .then((res) => {\n          this.handleRes(res);\n          resolve(res);\n        })\n        .catch((err) => {\n          this.handleErr(err);\n          reject(err);\n        });\n    });\n  }\n\n  Upload(url, data, uploadCallback) {\n    return new Promise(async (resolve, reject) => {\n      this.xhr\n        .post(url, data, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"multipart/form-data;\",\n          },\n          onUploadProgress: uploadCallback\n            ? (e) => {\n                let progress = Math.floor((e.loaded * 100) / e.total);\n                uploadCallback(progress);\n              }\n            : null,\n        })\n        .then((res) => {\n          this.handleRes(res);\n          resolve(res);\n        })\n        .catch((err) => {\n          this.handleErr(err);\n          reject(err);\n        });\n    });\n  }\n\n  Delete(url, data) {\n    return new Promise((resolve, reject) => {\n      let itemdata = { ...this.params };\n      if (data) itemdata = { ...this.params, ...data };\n      this.xhr\n        .delete(url, { data: itemdata })\n        .then((res) => {\n          this.handleRes(res);\n          resolve(res);\n        })\n        .catch((err) => {\n          this.handleErr(err);\n          reject(err);\n        });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}