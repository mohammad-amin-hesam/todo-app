{"ast":null,"code":"var _jsxFileName = \"/home/amin/Templates/todo-sample/components/TaskForm.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Input from \"./Input\";\nimport styled from \"styled-components\";\nimport { primary } from \"../helpers/colors\";\nconst validateObj = Yup.object().shape({\n  title: Yup.string().min(3, \"Title most be between 3 and 50\").max(50, \"Title most be between 3 and 50\").required(\"Title is required\"),\n  description: Yup.string().min(10, \"Title most be between 10 and 200\").max(200, \"Title most be between 10 and 200\").required(\"Description is required\")\n});\n\nconst TaskForm = props => {\n  const {\n    onSubmit,\n    renderOptions,\n    title,\n    description\n  } = props;\n  const initialValues = {\n    title: title || \"\",\n    description: description || \"\"\n  };\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validateObj,\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, formProps => {\n    const {\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit\n    } = formProps;\n    const titleErr = errors.title && touched.title;\n    const descriptionErr = errors.description && touched.description;\n    return __jsx(TaskFormContainer, {\n      onSubmit: handleSubmit,\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, renderOptions && renderOptions(), __jsx(Input, {\n      label: \"Title\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.title,\n      err: errors.title,\n      hasErr: titleErr,\n      id: \"addTaskInputTitle\",\n      name: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }), __jsx(Input, {\n      label: \"Description\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.description,\n      err: errors.description,\n      hasErr: descriptionErr,\n      id: \"addTaskInputDescription\",\n      name: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      className: \"taskFormButtonBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, \"Submit\")));\n  });\n};\n\nconst TaskFormContainer = styled.form(() => {\n  return {\n    \".taskFormButtonBox\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      button: {\n        background: primary,\n        color: \"#fff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 4,\n        height: 40,\n        width: 130\n      }\n    }\n  };\n});\nexport default TaskForm;","map":{"version":3,"sources":["/home/amin/Templates/todo-sample/components/TaskForm.tsx"],"names":["React","Formik","Yup","Input","styled","primary","validateObj","object","shape","title","string","min","max","required","description","TaskForm","props","onSubmit","renderOptions","initialValues","formProps","values","errors","touched","handleChange","handleBlur","handleSubmit","titleErr","descriptionErr","TaskFormContainer","form","display","alignItems","justifyContent","button","background","color","borderRadius","height","width"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,MAAMC,WAAW,GAAGJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,EAAAA,KAAK,EAAEP,GAAG,CAACQ,MAAJ,GACJC,GADI,CACA,CADA,EACG,gCADH,EAEJC,GAFI,CAEA,EAFA,EAEI,gCAFJ,EAGJC,QAHI,CAGK,mBAHL,CAD8B;AAKrCC,EAAAA,WAAW,EAAEZ,GAAG,CAACQ,MAAJ,GACVC,GADU,CACN,EADM,EACF,kCADE,EAEVC,GAFU,CAEN,GAFM,EAED,kCAFC,EAGVC,QAHU,CAGD,yBAHC;AALwB,CAAnB,CAApB;;AAWA,MAAME,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,aAAZ;AAA2BT,IAAAA,KAA3B;AAAkCK,IAAAA;AAAlC,MAAkDE,KAAxD;AAEA,QAAMG,aAAa,GAAG;AACpBV,IAAAA,KAAK,EAAEA,KAAK,IAAI,EADI;AAEpBK,IAAAA,WAAW,EAAEA,WAAW,IAAI;AAFR,GAAtB;AAKA,SACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAEK,aADjB;AAEE,IAAA,QAAQ,EAAEF,QAFZ;AAGE,IAAA,gBAAgB,EAAEX,WAHpB;AAIE,IAAA,kBAAkB,EAAE,IAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMIc,SAAD,IAAe;AACd,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,MAFI;AAGJC,MAAAA,OAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA;AANI,QAOFN,SAPJ;AASA,UAAMO,QAAQ,GAAGL,MAAM,CAACb,KAAP,IAAgBc,OAAO,CAACd,KAAzC;AACA,UAAMmB,cAAc,GAAGN,MAAM,CAACR,WAAP,IAAsBS,OAAO,CAACT,WAArD;AAEA,WACE,MAAC,iBAAD;AAAmB,MAAA,QAAQ,EAAEY,YAA7B;AAA2C,MAAA,YAAY,EAAC,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,aAAa,IAAIA,aAAa,EADjC,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EAAE,OADT;AAEE,MAAA,QAAQ,EAAEM,YAFZ;AAGE,MAAA,MAAM,EAAEC,UAHV;AAIE,MAAA,KAAK,EAAEJ,MAAM,CAACZ,KAJhB;AAKE,MAAA,GAAG,EAAEa,MAAM,CAACb,KALd;AAME,MAAA,MAAM,EAAEkB,QANV;AAOE,MAAA,EAAE,EAAE,mBAPN;AAQE,MAAA,IAAI,EAAC,OARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAYE,MAAC,KAAD;AACE,MAAA,KAAK,EAAE,aADT;AAEE,MAAA,QAAQ,EAAEH,YAFZ;AAGE,MAAA,MAAM,EAAEC,UAHV;AAIE,MAAA,KAAK,EAAEJ,MAAM,CAACP,WAJhB;AAKE,MAAA,GAAG,EAAEQ,MAAM,CAACR,WALd;AAME,MAAA,MAAM,EAAEc,cANV;AAOE,MAAA,EAAE,EAAE,yBAPN;AAQE,MAAA,IAAI,EAAC,aARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAsBE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAtBF,CADF;AA4BD,GA/CH,CADF;AAmDD,CA3DD;;AA6DA,MAAMC,iBAAiB,GAAGzB,MAAM,CAAC0B,IAAP,CAAY,MAAM;AAC1C,SAAO;AACL,0BAAsB;AACpBC,MAAAA,OAAO,EAAE,MADW;AAEpBC,MAAAA,UAAU,EAAE,QAFQ;AAGpBC,MAAAA,cAAc,EAAE,UAHI;AAIpBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,UAAU,EAAE9B,OADN;AAEN+B,QAAAA,KAAK,EAAE,MAFD;AAGNL,QAAAA,OAAO,EAAE,MAHH;AAINC,QAAAA,UAAU,EAAE,QAJN;AAKNC,QAAAA,cAAc,EAAE,QALV;AAMNI,QAAAA,YAAY,EAAE,CANR;AAONC,QAAAA,MAAM,EAAE,EAPF;AAQNC,QAAAA,KAAK,EAAE;AARD;AAJY;AADjB,GAAP;AAiBD,CAlByB,CAA1B;AAoBA,eAAexB,QAAf","sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Input from \"./Input\";\n\nimport styled from \"styled-components\";\nimport { primary } from \"../helpers/colors\";\n\nconst validateObj = Yup.object().shape({\n  title: Yup.string()\n    .min(3, \"Title most be between 3 and 50\")\n    .max(50, \"Title most be between 3 and 50\")\n    .required(\"Title is required\"),\n  description: Yup.string()\n    .min(10, \"Title most be between 10 and 200\")\n    .max(200, \"Title most be between 10 and 200\")\n    .required(\"Description is required\"),\n});\n\nconst TaskForm = (props) => {\n  const { onSubmit, renderOptions, title, description } = props;\n\n  const initialValues = {\n    title: title || \"\",\n    description: description || \"\",\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validateObj}\n      enableReinitialize={true}\n    >\n      {(formProps) => {\n        const {\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = formProps;\n\n        const titleErr = errors.title && touched.title;\n        const descriptionErr = errors.description && touched.description;\n\n        return (\n          <TaskFormContainer onSubmit={handleSubmit} autoComplete=\"off\">\n            {renderOptions && renderOptions()}\n            <Input\n              label={\"Title\"}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.title}\n              err={errors.title}\n              hasErr={titleErr}\n              id={\"addTaskInputTitle\"}\n              name=\"title\"\n            />\n            <Input\n              label={\"Description\"}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.description}\n              err={errors.description}\n              hasErr={descriptionErr}\n              id={\"addTaskInputDescription\"}\n              name=\"description\"\n            />\n            <div className=\"taskFormButtonBox\">\n              <button type=\"submit\">Submit</button>\n            </div>\n          </TaskFormContainer>\n        );\n      }}\n    </Formik>\n  );\n};\n\nconst TaskFormContainer = styled.form(() => {\n  return {\n    \".taskFormButtonBox\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      button: {\n        background: primary,\n        color: \"#fff\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 4,\n        height: 40,\n        width: 130,\n      },\n    },\n  };\n});\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}